-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dds_scaler is
port (
    ap_local_block : OUT STD_LOGIC;
    ap_local_deadlock : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dds_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    dds_TVALID : IN STD_LOGIC;
    dds_TREADY : OUT STD_LOGIC;
    dds_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    dds_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    dds_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    dds_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    scale : IN STD_LOGIC_VECTOR (15 downto 0);
    u : OUT STD_LOGIC_VECTOR (15 downto 0);
    u_ap_vld : OUT STD_LOGIC;
    v : OUT STD_LOGIC_VECTOR (15 downto 0);
    v_ap_vld : OUT STD_LOGIC;
    w : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dds_scaler is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dds_scaler_dds_scaler,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.150000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=6,HLS_SYN_LUT=59,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dds_TDATA_blk_n : STD_LOGIC;
    signal tmp_user_V_reg_132 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal sdat_fu_117_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_125_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dds_dat_fu_108_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_125_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_125_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal regslice_both_dds_V_data_V_U_apdone_blk : STD_LOGIC;
    signal dds_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal dds_TVALID_int_regslice : STD_LOGIC;
    signal dds_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_dds_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_dds_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal dds_TKEEP_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_dds_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dds_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_dds_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal dds_TSTRB_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_dds_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dds_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_dds_V_user_V_U_apdone_blk : STD_LOGIC;
    signal dds_TUSER_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_dds_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dds_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_dds_V_last_V_U_apdone_blk : STD_LOGIC;
    signal dds_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_dds_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dds_V_last_V_U_ack_in : STD_LOGIC;
    signal grp_fu_125_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component dds_scaler_mul_mul_16s_16ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dds_scaler_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    mul_mul_16s_16ns_32_4_1_U1 : component dds_scaler_mul_mul_16s_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => dds_TDATA_int_regslice,
        din1 => grp_fu_125_p1,
        ce => grp_fu_125_ce,
        dout => grp_fu_125_p2);

    regslice_both_dds_V_data_V_U : component dds_scaler_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => dds_TDATA,
        vld_in => dds_TVALID,
        ack_in => regslice_both_dds_V_data_V_U_ack_in,
        data_out => dds_TDATA_int_regslice,
        vld_out => dds_TVALID_int_regslice,
        ack_out => dds_TREADY_int_regslice,
        apdone_blk => regslice_both_dds_V_data_V_U_apdone_blk);

    regslice_both_dds_V_keep_V_U : component dds_scaler_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => dds_TKEEP,
        vld_in => dds_TVALID,
        ack_in => regslice_both_dds_V_keep_V_U_ack_in,
        data_out => dds_TKEEP_int_regslice,
        vld_out => regslice_both_dds_V_keep_V_U_vld_out,
        ack_out => dds_TREADY_int_regslice,
        apdone_blk => regslice_both_dds_V_keep_V_U_apdone_blk);

    regslice_both_dds_V_strb_V_U : component dds_scaler_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => dds_TSTRB,
        vld_in => dds_TVALID,
        ack_in => regslice_both_dds_V_strb_V_U_ack_in,
        data_out => dds_TSTRB_int_regslice,
        vld_out => regslice_both_dds_V_strb_V_U_vld_out,
        ack_out => dds_TREADY_int_regslice,
        apdone_blk => regslice_both_dds_V_strb_V_U_apdone_blk);

    regslice_both_dds_V_user_V_U : component dds_scaler_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => dds_TUSER,
        vld_in => dds_TVALID,
        ack_in => regslice_both_dds_V_user_V_U_ack_in,
        data_out => dds_TUSER_int_regslice,
        vld_out => regslice_both_dds_V_user_V_U_vld_out,
        ack_out => dds_TREADY_int_regslice,
        apdone_blk => regslice_both_dds_V_user_V_U_apdone_blk);

    regslice_both_dds_V_last_V_U : component dds_scaler_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => dds_TLAST,
        vld_in => dds_TVALID,
        ack_in => regslice_both_dds_V_last_V_U_ack_in,
        data_out => dds_TLAST_int_regslice,
        vld_out => regslice_both_dds_V_last_V_U_vld_out,
        ack_out => dds_TREADY_int_regslice,
        apdone_blk => regslice_both_dds_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                tmp_user_V_reg_132 <= dds_TUSER_int_regslice;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, dds_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((dds_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, dds_TVALID_int_regslice)
    begin
        if (((dds_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, dds_TVALID_int_regslice)
    begin
                ap_block_state1 <= ((dds_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_logic_0;

    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    dds_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, dds_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            dds_TDATA_blk_n <= dds_TVALID_int_regslice;
        else 
            dds_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dds_TREADY <= regslice_both_dds_V_data_V_U_ack_in;

    dds_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_state1, dds_TVALID_int_regslice)
    begin
        if ((not(((dds_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dds_TREADY_int_regslice <= ap_const_logic_1;
        else 
            dds_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    dds_dat_fu_108_p4 <= grp_fu_125_p2(31 downto 16);

    grp_fu_125_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, dds_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and ((dds_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0)))) then 
            grp_fu_125_ce <= ap_const_logic_0;
        else 
            grp_fu_125_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_125_p1 <= grp_fu_125_p10(16 - 1 downto 0);
    grp_fu_125_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(scale),32));
    sdat_fu_117_p2 <= std_logic_vector(unsigned(dds_dat_fu_108_p4) + unsigned(ap_const_lv16_7FFF));
    u <= sdat_fu_117_p2;

    u_ap_vld_assign_proc : process(tmp_user_V_reg_132, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_user_V_reg_132 = ap_const_lv2_0))) then 
            u_ap_vld <= ap_const_logic_1;
        else 
            u_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    v <= sdat_fu_117_p2;

    v_ap_vld_assign_proc : process(tmp_user_V_reg_132, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_user_V_reg_132 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_user_V_reg_132 = ap_const_lv2_2)))) then 
            v_ap_vld <= ap_const_logic_1;
        else 
            v_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
