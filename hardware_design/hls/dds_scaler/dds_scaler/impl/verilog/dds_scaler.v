// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dds_scaler_dds_scaler,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.150000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=6,HLS_SYN_LUT=59,HLS_VERSION=2021_2}" *)

module dds_scaler (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dds_TDATA,
        dds_TVALID,
        dds_TREADY,
        dds_TKEEP,
        dds_TSTRB,
        dds_TUSER,
        dds_TLAST,
        scale,
        u,
        u_ap_vld,
        v,
        v_ap_vld,
        w
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] dds_TDATA;
input   dds_TVALID;
output   dds_TREADY;
input  [1:0] dds_TKEEP;
input  [1:0] dds_TSTRB;
input  [1:0] dds_TUSER;
input  [0:0] dds_TLAST;
input  [15:0] scale;
output  [15:0] u;
output   u_ap_vld;
output  [15:0] v;
output   v_ap_vld;
input  [15:0] w;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg u_ap_vld;
reg v_ap_vld;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    dds_TDATA_blk_n;
reg   [1:0] tmp_user_V_reg_132;
reg    ap_block_state1;
wire   [15:0] sdat_fu_117_p2;
wire    ap_CS_fsm_state4;
wire  signed [31:0] grp_fu_125_p2;
wire   [15:0] dds_dat_fu_108_p4;
wire   [15:0] grp_fu_125_p1;
reg    grp_fu_125_ce;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    regslice_both_dds_V_data_V_U_apdone_blk;
wire  signed [15:0] dds_TDATA_int_regslice;
wire    dds_TVALID_int_regslice;
reg    dds_TREADY_int_regslice;
wire    regslice_both_dds_V_data_V_U_ack_in;
wire    regslice_both_dds_V_keep_V_U_apdone_blk;
wire   [1:0] dds_TKEEP_int_regslice;
wire    regslice_both_dds_V_keep_V_U_vld_out;
wire    regslice_both_dds_V_keep_V_U_ack_in;
wire    regslice_both_dds_V_strb_V_U_apdone_blk;
wire   [1:0] dds_TSTRB_int_regslice;
wire    regslice_both_dds_V_strb_V_U_vld_out;
wire    regslice_both_dds_V_strb_V_U_ack_in;
wire    regslice_both_dds_V_user_V_U_apdone_blk;
wire   [1:0] dds_TUSER_int_regslice;
wire    regslice_both_dds_V_user_V_U_vld_out;
wire    regslice_both_dds_V_user_V_U_ack_in;
wire    regslice_both_dds_V_last_V_U_apdone_blk;
wire   [0:0] dds_TLAST_int_regslice;
wire    regslice_both_dds_V_last_V_U_vld_out;
wire    regslice_both_dds_V_last_V_U_ack_in;
wire   [31:0] grp_fu_125_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

dds_scaler_mul_mul_16s_16ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16s_16ns_32_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(dds_TDATA_int_regslice),
    .din1(grp_fu_125_p1),
    .ce(grp_fu_125_ce),
    .dout(grp_fu_125_p2)
);

dds_scaler_regslice_both #(
    .DataWidth( 16 ))
regslice_both_dds_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(dds_TDATA),
    .vld_in(dds_TVALID),
    .ack_in(regslice_both_dds_V_data_V_U_ack_in),
    .data_out(dds_TDATA_int_regslice),
    .vld_out(dds_TVALID_int_regslice),
    .ack_out(dds_TREADY_int_regslice),
    .apdone_blk(regslice_both_dds_V_data_V_U_apdone_blk)
);

dds_scaler_regslice_both #(
    .DataWidth( 2 ))
regslice_both_dds_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(dds_TKEEP),
    .vld_in(dds_TVALID),
    .ack_in(regslice_both_dds_V_keep_V_U_ack_in),
    .data_out(dds_TKEEP_int_regslice),
    .vld_out(regslice_both_dds_V_keep_V_U_vld_out),
    .ack_out(dds_TREADY_int_regslice),
    .apdone_blk(regslice_both_dds_V_keep_V_U_apdone_blk)
);

dds_scaler_regslice_both #(
    .DataWidth( 2 ))
regslice_both_dds_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(dds_TSTRB),
    .vld_in(dds_TVALID),
    .ack_in(regslice_both_dds_V_strb_V_U_ack_in),
    .data_out(dds_TSTRB_int_regslice),
    .vld_out(regslice_both_dds_V_strb_V_U_vld_out),
    .ack_out(dds_TREADY_int_regslice),
    .apdone_blk(regslice_both_dds_V_strb_V_U_apdone_blk)
);

dds_scaler_regslice_both #(
    .DataWidth( 2 ))
regslice_both_dds_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(dds_TUSER),
    .vld_in(dds_TVALID),
    .ack_in(regslice_both_dds_V_user_V_U_ack_in),
    .data_out(dds_TUSER_int_regslice),
    .vld_out(regslice_both_dds_V_user_V_U_vld_out),
    .ack_out(dds_TREADY_int_regslice),
    .apdone_blk(regslice_both_dds_V_user_V_U_apdone_blk)
);

dds_scaler_regslice_both #(
    .DataWidth( 1 ))
regslice_both_dds_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(dds_TLAST),
    .vld_in(dds_TVALID),
    .ack_in(regslice_both_dds_V_last_V_U_ack_in),
    .data_out(dds_TLAST_int_regslice),
    .vld_out(regslice_both_dds_V_last_V_U_vld_out),
    .ack_out(dds_TREADY_int_regslice),
    .apdone_blk(regslice_both_dds_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_user_V_reg_132 <= dds_TUSER_int_regslice;
    end
end

always @ (*) begin
    if (((dds_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        dds_TDATA_blk_n = dds_TVALID_int_regslice;
    end else begin
        dds_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dds_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        dds_TREADY_int_regslice = 1'b1;
    end else begin
        dds_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ((dds_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0)))) begin
        grp_fu_125_ce = 1'b0;
    end else begin
        grp_fu_125_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_user_V_reg_132 == 2'd0))) begin
        u_ap_vld = 1'b1;
    end else begin
        u_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (tmp_user_V_reg_132 == 2'd1)) | ((1'b1 == ap_CS_fsm_state4) & (tmp_user_V_reg_132 == 2'd2)))) begin
        v_ap_vld = 1'b1;
    end else begin
        v_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((dds_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((dds_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0));
end


assign ap_local_deadlock = 1'b0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign dds_TREADY = regslice_both_dds_V_data_V_U_ack_in;

assign dds_dat_fu_108_p4 = {{grp_fu_125_p2[31:16]}};

assign grp_fu_125_p1 = grp_fu_125_p10;

assign grp_fu_125_p10 = scale;

assign sdat_fu_117_p2 = (dds_dat_fu_108_p4 + 16'd32767);

assign u = sdat_fu_117_p2;

assign v = sdat_fu_117_p2;


reg find_kernel_block = 0;
// synthesis translate_off
`include "dds_scaler_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on


reg find_kernel_block = 0;
assign ap_local_block = find_kernel_block;
// synthesis translate_off
`include "dds_scaler_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //dds_scaler


