// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="iclarke_iclarke,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.912000,HLS_SYN_LAT=4,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=337,HLS_SYN_LUT=345,HLS_VERSION=2021_2}" *)

module iclarke (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_in_TDATA,
        data_in_TVALID,
        data_in_TREADY,
        current_out_TDATA,
        current_out_TVALID,
        current_out_TREADY,
        axis_debug_TDATA,
        axis_debug_TVALID,
        axis_debug_TREADY
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] data_in_TDATA;
input   data_in_TVALID;
output   data_in_TREADY;
output  [63:0] current_out_TDATA;
output   current_out_TVALID;
input   current_out_TREADY;
output  [31:0] axis_debug_TDATA;
output   axis_debug_TVALID;
input   axis_debug_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    data_in_TDATA_blk_n;
reg    current_out_TDATA_blk_n;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg    axis_debug_TDATA_blk_n;
wire   [31:0] ia_fu_82_p1;
reg   [31:0] ia_reg_256;
wire   [16:0] trunc_ln27_fu_106_p1;
reg   [16:0] trunc_ln27_reg_267;
wire   [15:0] pha_clamped_fu_110_p1;
reg   [15:0] pha_clamped_reg_272;
reg   [31:0] sqt_reg_277;
wire    ap_CS_fsm_state2;
reg   [16:0] trunc_ln27_4_reg_284;
reg   [0:0] tmp_reg_289;
wire    ap_CS_fsm_state3;
reg   [15:0] trunc_ln26_1_reg_294;
reg   [15:0] trunc_ln26_2_reg_299;
wire   [15:0] phc_clamped_fu_224_p3;
reg   [15:0] phc_clamped_reg_304;
reg    ap_block_state1;
reg    ap_block_state4;
reg    ap_block_state4_io;
wire  signed [31:0] ib_fu_86_p4;
wire   [32:0] grp_fu_100_p1;
wire   [62:0] grp_fu_100_p2;
wire   [31:0] sub_ln26_fu_134_p2;
wire   [16:0] trunc_ln26_fu_138_p1;
wire   [16:0] sub_ln26_1_fu_150_p2;
wire   [31:0] add_ln27_fu_176_p2;
wire   [31:0] sub_ln27_fu_184_p2;
wire   [16:0] add_ln27_1_fu_180_p2;
wire   [15:0] trunc_ln27_1_fu_198_p4;
wire   [0:0] tmp_1_fu_190_p3;
wire   [15:0] sub_ln27_1_fu_208_p2;
wire   [15:0] trunc_ln27_2_fu_214_p4;
wire   [15:0] sub_ln26_2_fu_232_p2;
wire   [15:0] phb_clamped_fu_237_p3;
wire   [47:0] data_o_fu_243_p4;
reg    grp_fu_100_ce;
wire    regslice_both_current_out_U_apdone_blk;
wire    regslice_both_axis_debug_U_apdone_blk;
reg    ap_block_state5;
reg    ap_block_state5_io;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    regslice_both_data_in_U_apdone_blk;
wire   [63:0] data_in_TDATA_int_regslice;
wire    data_in_TVALID_int_regslice;
reg    data_in_TREADY_int_regslice;
wire    regslice_both_data_in_U_ack_in;
wire   [63:0] current_out_TDATA_int_regslice;
reg    current_out_TVALID_int_regslice;
wire    current_out_TREADY_int_regslice;
wire    regslice_both_current_out_U_vld_out;
reg    axis_debug_TVALID_int_regslice;
wire    axis_debug_TREADY_int_regslice;
wire    regslice_both_axis_debug_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

iclarke_mul_32s_33ns_63_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 33 ),
    .dout_WIDTH( 63 ))
mul_32s_33ns_63_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ib_fu_86_p4),
    .din1(grp_fu_100_p1),
    .ce(grp_fu_100_ce),
    .dout(grp_fu_100_p2)
);

iclarke_regslice_both #(
    .DataWidth( 64 ))
regslice_both_data_in_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(data_in_TDATA),
    .vld_in(data_in_TVALID),
    .ack_in(regslice_both_data_in_U_ack_in),
    .data_out(data_in_TDATA_int_regslice),
    .vld_out(data_in_TVALID_int_regslice),
    .ack_out(data_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_data_in_U_apdone_blk)
);

iclarke_regslice_both #(
    .DataWidth( 64 ))
regslice_both_current_out_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(current_out_TDATA_int_regslice),
    .vld_in(current_out_TVALID_int_regslice),
    .ack_in(current_out_TREADY_int_regslice),
    .data_out(current_out_TDATA),
    .vld_out(regslice_both_current_out_U_vld_out),
    .ack_out(current_out_TREADY),
    .apdone_blk(regslice_both_current_out_U_apdone_blk)
);

iclarke_regslice_both #(
    .DataWidth( 32 ))
regslice_both_axis_debug_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(sqt_reg_277),
    .vld_in(axis_debug_TVALID_int_regslice),
    .ack_in(axis_debug_TREADY_int_regslice),
    .data_out(axis_debug_TDATA),
    .vld_out(regslice_both_axis_debug_U_vld_out),
    .ack_out(axis_debug_TREADY),
    .apdone_blk(regslice_both_axis_debug_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        ia_reg_256 <= ia_fu_82_p1;
        pha_clamped_reg_272 <= pha_clamped_fu_110_p1;
        trunc_ln27_reg_267 <= trunc_ln27_fu_106_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        phc_clamped_reg_304 <= phc_clamped_fu_224_p3;
        tmp_reg_289 <= sub_ln26_fu_134_p2[32'd31];
        trunc_ln26_1_reg_294 <= {{sub_ln26_1_fu_150_p2[16:1]}};
        trunc_ln26_2_reg_299 <= {{sub_ln26_fu_134_p2[16:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sqt_reg_277 <= {{grp_fu_100_p2[62:31]}};
        trunc_ln27_4_reg_284 <= {{grp_fu_100_p2[47:31]}};
    end
end

always @ (*) begin
    if (((data_in_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if (((axis_debug_TREADY_int_regslice == 1'b0) | (current_out_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_io))) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((axis_debug_TREADY_int_regslice == 1'b0) | (current_out_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state5_io) | (regslice_both_axis_debug_U_apdone_blk == 1'b1) | (regslice_both_current_out_U_apdone_blk == 1'b1))) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((axis_debug_TREADY_int_regslice == 1'b0) | (current_out_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state5_io) | (regslice_both_axis_debug_U_apdone_blk == 1'b1) | (regslice_both_current_out_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((axis_debug_TREADY_int_regslice == 1'b0) | (current_out_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state5_io) | (regslice_both_axis_debug_U_apdone_blk == 1'b1) | (regslice_both_current_out_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        axis_debug_TDATA_blk_n = axis_debug_TREADY_int_regslice;
    end else begin
        axis_debug_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((axis_debug_TREADY_int_regslice == 1'b0) | (current_out_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_io)) & (1'b1 == ap_CS_fsm_state4))) begin
        axis_debug_TVALID_int_regslice = 1'b1;
    end else begin
        axis_debug_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        current_out_TDATA_blk_n = current_out_TREADY_int_regslice;
    end else begin
        current_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((axis_debug_TREADY_int_regslice == 1'b0) | (current_out_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_io)) & (1'b1 == ap_CS_fsm_state4))) begin
        current_out_TVALID_int_regslice = 1'b1;
    end else begin
        current_out_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        data_in_TDATA_blk_n = data_in_TVALID_int_regslice;
    end else begin
        data_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((data_in_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_in_TREADY_int_regslice = 1'b1;
    end else begin
        data_in_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((data_in_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_fu_100_ce = 1'b1;
    end else begin
        grp_fu_100_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((data_in_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if ((~((axis_debug_TREADY_int_regslice == 1'b0) | (current_out_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_io)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((axis_debug_TREADY_int_regslice == 1'b0) | (current_out_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state5_io) | (regslice_both_axis_debug_U_apdone_blk == 1'b1) | (regslice_both_current_out_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln27_1_fu_180_p2 = (trunc_ln27_4_reg_284 + trunc_ln27_reg_267);

assign add_ln27_fu_176_p2 = (sqt_reg_277 + ia_reg_256);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((data_in_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((axis_debug_TREADY_int_regslice == 1'b0) | (current_out_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state4_io = ((axis_debug_TREADY_int_regslice == 1'b0) | (current_out_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((axis_debug_TREADY_int_regslice == 1'b0) | (current_out_TREADY_int_regslice == 1'b0) | (regslice_both_axis_debug_U_apdone_blk == 1'b1) | (regslice_both_current_out_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_state5_io = ((axis_debug_TREADY_int_regslice == 1'b0) | (current_out_TREADY_int_regslice == 1'b0));
end


assign ap_local_deadlock = 1'b0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign axis_debug_TVALID = regslice_both_axis_debug_U_vld_out;

assign current_out_TDATA_int_regslice = data_o_fu_243_p4;

assign current_out_TVALID = regslice_both_current_out_U_vld_out;

assign data_in_TREADY = regslice_both_data_in_U_ack_in;

assign data_o_fu_243_p4 = {{{phc_clamped_reg_304}, {phb_clamped_fu_237_p3}}, {pha_clamped_reg_272}};

assign grp_fu_100_p1 = 63'd3719550707;

assign ia_fu_82_p1 = data_in_TDATA_int_regslice[31:0];

assign ib_fu_86_p4 = {{data_in_TDATA_int_regslice[63:32]}};

assign pha_clamped_fu_110_p1 = data_in_TDATA_int_regslice[15:0];

assign phb_clamped_fu_237_p3 = ((tmp_reg_289[0:0] == 1'b1) ? sub_ln26_2_fu_232_p2 : trunc_ln26_2_reg_299);

assign phc_clamped_fu_224_p3 = ((tmp_1_fu_190_p3[0:0] == 1'b1) ? sub_ln27_1_fu_208_p2 : trunc_ln27_2_fu_214_p4);

assign sub_ln26_1_fu_150_p2 = (17'd0 - trunc_ln26_fu_138_p1);

assign sub_ln26_2_fu_232_p2 = (16'd0 - trunc_ln26_1_reg_294);

assign sub_ln26_fu_134_p2 = (sqt_reg_277 - ia_reg_256);

assign sub_ln27_1_fu_208_p2 = (16'd0 - trunc_ln27_1_fu_198_p4);

assign sub_ln27_fu_184_p2 = (32'd0 - add_ln27_fu_176_p2);

assign tmp_1_fu_190_p3 = sub_ln27_fu_184_p2[32'd31];

assign trunc_ln26_fu_138_p1 = sub_ln26_fu_134_p2[16:0];

assign trunc_ln27_1_fu_198_p4 = {{add_ln27_1_fu_180_p2[16:1]}};

assign trunc_ln27_2_fu_214_p4 = {{sub_ln27_fu_184_p2[16:1]}};

assign trunc_ln27_fu_106_p1 = data_in_TDATA_int_regslice[16:0];


reg find_kernel_block = 0;
assign ap_local_block = find_kernel_block;
// synthesis translate_off
`include "iclarke_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //iclarke

