// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ipark_ipark,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.871000,HLS_SYN_LAT=10,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=669,HLS_SYN_LUT=320,HLS_VERSION=2021_2}" *)

module ipark (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        idq_TDATA,
        idq_TVALID,
        idq_TREADY,
        theta_TDATA,
        theta_TVALID,
        theta_TREADY,
        vectors_TDATA,
        vectors_TVALID,
        vectors_TREADY
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] idq_TDATA;
input   idq_TVALID;
output   idq_TREADY;
input  [15:0] theta_TDATA;
input   theta_TVALID;
output   theta_TREADY;
output  [63:0] vectors_TDATA;
output   vectors_TVALID;
input   vectors_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] cos_lut_address0;
reg    cos_lut_ce0;
wire   [31:0] cos_lut_q0;
wire   [9:0] sin_lut_address0;
reg    sin_lut_ce0;
wire   [31:0] sin_lut_q0;
reg    idq_TDATA_blk_n;
reg    theta_TDATA_blk_n;
reg    vectors_TDATA_blk_n;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire   [31:0] id_fu_105_p1;
reg   [31:0] id_reg_233;
reg   [31:0] iq_reg_238;
wire   [9:0] theta_clamped_fu_139_p3;
reg   [9:0] theta_clamped_reg_243;
wire    ap_CS_fsm_state2;
reg   [31:0] cos_theta_reg_258;
wire    ap_CS_fsm_state3;
reg   [31:0] sin_theta_reg_263;
wire  signed [62:0] sext_ln20_fu_152_p1;
wire    ap_CS_fsm_state4;
wire  signed [62:0] sext_ln21_fu_155_p1;
wire  signed [62:0] sext_ln23_fu_158_p1;
wire  signed [62:0] sext_ln24_fu_167_p1;
wire   [62:0] grp_fu_161_p2;
reg   [62:0] id_cos_reg_292;
wire    ap_CS_fsm_state8;
wire   [62:0] grp_fu_170_p2;
reg   [62:0] iq_cos_reg_297;
wire   [62:0] grp_fu_176_p2;
reg   [62:0] id_sin_reg_302;
wire   [62:0] grp_fu_182_p2;
reg   [62:0] iq_sin_reg_307;
reg   [31:0] xa_reg_312;
wire    ap_CS_fsm_state9;
reg   [31:0] tmp_reg_317;
wire   [63:0] zext_ln20_fu_147_p1;
reg    ap_block_state1;
wire   [5:0] tmp_3_fu_123_p4;
wire   [0:0] icmp_ln18_fu_133_p2;
wire   [9:0] trunc_ln154_fu_119_p1;
wire  signed [31:0] grp_fu_161_p0;
wire  signed [31:0] grp_fu_161_p1;
wire  signed [31:0] grp_fu_170_p0;
wire  signed [31:0] grp_fu_170_p1;
wire  signed [31:0] grp_fu_176_p0;
wire  signed [31:0] grp_fu_176_p1;
wire  signed [31:0] grp_fu_182_p0;
wire  signed [31:0] grp_fu_182_p1;
wire   [62:0] sub_ln28_fu_188_p2;
wire   [62:0] add_ln29_fu_202_p2;
wire   [63:0] shl_ln_fu_219_p3;
wire  signed [63:0] sext_ln31_fu_216_p1;
wire    regslice_both_vectors_U_apdone_blk;
reg    ap_block_state11;
reg   [10:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
wire    regslice_both_idq_U_apdone_blk;
wire   [63:0] idq_TDATA_int_regslice;
wire    idq_TVALID_int_regslice;
reg    idq_TREADY_int_regslice;
wire    regslice_both_idq_U_ack_in;
wire    regslice_both_theta_U_apdone_blk;
wire   [15:0] theta_TDATA_int_regslice;
wire    theta_TVALID_int_regslice;
reg    theta_TREADY_int_regslice;
wire    regslice_both_theta_U_ack_in;
wire   [63:0] vectors_TDATA_int_regslice;
reg    vectors_TVALID_int_regslice;
wire    vectors_TREADY_int_regslice;
wire    regslice_both_vectors_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

ipark_cos_lut_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 1023 ),
    .AddressWidth( 10 ))
cos_lut_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cos_lut_address0),
    .ce0(cos_lut_ce0),
    .q0(cos_lut_q0)
);

ipark_sin_lut_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 1023 ),
    .AddressWidth( 10 ))
sin_lut_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sin_lut_address0),
    .ce0(sin_lut_ce0),
    .q0(sin_lut_q0)
);

ipark_mul_32s_32s_63_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32s_32s_63_5_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_161_p0),
    .din1(grp_fu_161_p1),
    .ce(1'b1),
    .dout(grp_fu_161_p2)
);

ipark_mul_32s_32s_63_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32s_32s_63_5_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_170_p0),
    .din1(grp_fu_170_p1),
    .ce(1'b1),
    .dout(grp_fu_170_p2)
);

ipark_mul_32s_32s_63_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32s_32s_63_5_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_176_p0),
    .din1(grp_fu_176_p1),
    .ce(1'b1),
    .dout(grp_fu_176_p2)
);

ipark_mul_32s_32s_63_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32s_32s_63_5_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_182_p0),
    .din1(grp_fu_182_p1),
    .ce(1'b1),
    .dout(grp_fu_182_p2)
);

ipark_regslice_both #(
    .DataWidth( 64 ))
regslice_both_idq_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(idq_TDATA),
    .vld_in(idq_TVALID),
    .ack_in(regslice_both_idq_U_ack_in),
    .data_out(idq_TDATA_int_regslice),
    .vld_out(idq_TVALID_int_regslice),
    .ack_out(idq_TREADY_int_regslice),
    .apdone_blk(regslice_both_idq_U_apdone_blk)
);

ipark_regslice_both #(
    .DataWidth( 16 ))
regslice_both_theta_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(theta_TDATA),
    .vld_in(theta_TVALID),
    .ack_in(regslice_both_theta_U_ack_in),
    .data_out(theta_TDATA_int_regslice),
    .vld_out(theta_TVALID_int_regslice),
    .ack_out(theta_TREADY_int_regslice),
    .apdone_blk(regslice_both_theta_U_apdone_blk)
);

ipark_regslice_both #(
    .DataWidth( 64 ))
regslice_both_vectors_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(vectors_TDATA_int_regslice),
    .vld_in(vectors_TVALID_int_regslice),
    .ack_in(vectors_TREADY_int_regslice),
    .data_out(vectors_TDATA),
    .vld_out(regslice_both_vectors_U_vld_out),
    .ack_out(vectors_TREADY),
    .apdone_blk(regslice_both_vectors_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cos_theta_reg_258 <= cos_lut_q0;
        sin_theta_reg_263 <= sin_lut_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        id_cos_reg_292 <= grp_fu_161_p2;
        id_sin_reg_302 <= grp_fu_176_p2;
        iq_cos_reg_297 <= grp_fu_170_p2;
        iq_sin_reg_307 <= grp_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        id_reg_233 <= id_fu_105_p1;
        iq_reg_238 <= {{idq_TDATA_int_regslice[63:32]}};
        theta_clamped_reg_243 <= theta_clamped_fu_139_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_reg_317 <= {{add_ln29_fu_202_p2[62:31]}};
        xa_reg_312 <= {{sub_ln28_fu_188_p2[62:31]}};
    end
end

always @ (*) begin
    if ((vectors_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if (((vectors_TREADY_int_regslice == 1'b0) | (regslice_both_vectors_U_apdone_blk == 1'b1))) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

always @ (*) begin
    if (((theta_TVALID_int_regslice == 1'b0) | (idq_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((~((vectors_TREADY_int_regslice == 1'b0) | (regslice_both_vectors_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((vectors_TREADY_int_regslice == 1'b0) | (regslice_both_vectors_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cos_lut_ce0 = 1'b1;
    end else begin
        cos_lut_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        idq_TDATA_blk_n = idq_TVALID_int_regslice;
    end else begin
        idq_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((theta_TVALID_int_regslice == 1'b0) | (idq_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        idq_TREADY_int_regslice = 1'b1;
    end else begin
        idq_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sin_lut_ce0 = 1'b1;
    end else begin
        sin_lut_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        theta_TDATA_blk_n = theta_TVALID_int_regslice;
    end else begin
        theta_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((theta_TVALID_int_regslice == 1'b0) | (idq_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        theta_TREADY_int_regslice = 1'b1;
    end else begin
        theta_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        vectors_TDATA_blk_n = vectors_TREADY_int_regslice;
    end else begin
        vectors_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (vectors_TREADY_int_regslice == 1'b1))) begin
        vectors_TVALID_int_regslice = 1'b1;
    end else begin
        vectors_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((theta_TVALID_int_regslice == 1'b0) | (idq_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (vectors_TREADY_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if ((~((vectors_TREADY_int_regslice == 1'b0) | (regslice_both_vectors_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln29_fu_202_p2 = (id_sin_reg_302 + iq_cos_reg_297);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((theta_TVALID_int_regslice == 1'b0) | (idq_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state11 = ((vectors_TREADY_int_regslice == 1'b0) | (regslice_both_vectors_U_apdone_blk == 1'b1));
end


assign ap_local_deadlock = 1'b0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cos_lut_address0 = zext_ln20_fu_147_p1;

assign grp_fu_161_p0 = sext_ln20_fu_152_p1;

assign grp_fu_161_p1 = sext_ln23_fu_158_p1;

assign grp_fu_170_p0 = sext_ln20_fu_152_p1;

assign grp_fu_170_p1 = sext_ln24_fu_167_p1;

assign grp_fu_176_p0 = sext_ln21_fu_155_p1;

assign grp_fu_176_p1 = sext_ln23_fu_158_p1;

assign grp_fu_182_p0 = sext_ln21_fu_155_p1;

assign grp_fu_182_p1 = sext_ln24_fu_167_p1;

assign icmp_ln18_fu_133_p2 = ((tmp_3_fu_123_p4 != 6'd0) ? 1'b1 : 1'b0);

assign id_fu_105_p1 = idq_TDATA_int_regslice[31:0];

assign idq_TREADY = regslice_both_idq_U_ack_in;

assign sext_ln20_fu_152_p1 = $signed(cos_theta_reg_258);

assign sext_ln21_fu_155_p1 = $signed(sin_theta_reg_263);

assign sext_ln23_fu_158_p1 = $signed(id_reg_233);

assign sext_ln24_fu_167_p1 = $signed(iq_reg_238);

assign sext_ln31_fu_216_p1 = $signed(xa_reg_312);

assign shl_ln_fu_219_p3 = {{tmp_reg_317}, {32'd0}};

assign sin_lut_address0 = zext_ln20_fu_147_p1;

assign sub_ln28_fu_188_p2 = (id_cos_reg_292 - iq_sin_reg_307);

assign theta_TREADY = regslice_both_theta_U_ack_in;

assign theta_clamped_fu_139_p3 = ((icmp_ln18_fu_133_p2[0:0] == 1'b1) ? 10'd1023 : trunc_ln154_fu_119_p1);

assign tmp_3_fu_123_p4 = {{theta_TDATA_int_regslice[15:10]}};

assign trunc_ln154_fu_119_p1 = theta_TDATA_int_regslice[9:0];

assign vectors_TDATA_int_regslice = (shl_ln_fu_219_p3 | sext_ln31_fu_216_p1);

assign vectors_TVALID = regslice_both_vectors_U_vld_out;

assign zext_ln20_fu_147_p1 = theta_clamped_reg_243;


reg find_kernel_block = 0;
assign ap_local_block = find_kernel_block;
// synthesis translate_off
`include "ipark_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //ipark

